# test_transformations.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
–Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
sys.path.append('/Users/void/proj/wundernn_hack')
from data_transformer import DataTransformer, compare_transformations, find_best_transformation

def load_and_analyze_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_path = "/Users/void/proj/wundernn_hack/competition_package/datasets/train.parquet"
    df = pd.read_parquet(data_path)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_cols = [col for col in df.columns if col not in ["seq_ix", "step_in_seq", "need_prediction"]]
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å {len(feature_cols)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {df['seq_ix'].nunique()}")
    
    # –ë–µ—Ä–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    sample_size = min(50000, len(df))
    df_sample = df.head(sample_size)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X = df_sample[feature_cols].values
    
    print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –∏–∑ {sample_size} –∑–∞–ø–∏—Å–µ–π")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"  –°—Ä–µ–¥–Ω—è—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: {np.mean(np.var(X, axis=0)):.4f}")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–π: {np.std(np.var(X, axis=0)):.4f}")
    print(f"  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {np.std(np.var(X, axis=0)) / np.mean(np.var(X, axis=0)):.4f}")
    
    return X, feature_cols

def test_transformations(X):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò")
    print("="*60)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
    methods = ['box_cox', 'yeo_johnson', 'quantile', 'log', 'sqrt']
    results = compare_transformations(X, methods)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:")
    print("-" * 60)
    
    successful_methods = []
    for method, result in results.items():
        if 'error' not in result:
            successful_methods.append(method)
            print(f"\n{method.upper()}:")
            print(f"  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {result['variance_stability']:.4f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ CV: {result['mean_cv_reduction']:.4f}")
            print(f"  –û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–π: {result['variance_ratio']:.4f}")
        else:
            print(f"\n{method.upper()}: –û–®–ò–ë–ö–ê - {result['error']}")
    
    return results, successful_methods

def visualize_transformations(X, results, successful_methods):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    n_methods = len(successful_methods)
    if n_methods == 0:
        print("–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    fig, axes = plt.subplots(2, n_methods, figsize=(5*n_methods, 10))
    if n_methods == 1:
        axes = axes.reshape(2, 1)
    
    fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', fontsize=16)
    
    for i, method in enumerate(successful_methods):
        result = results[method]
        transformer = result['transformer']
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        X_transformed = transformer.transform(X)
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        axes[0, i].hist(X.flatten(), bins=50, alpha=0.7, density=True, label='–ò—Å—Ö–æ–¥–Ω—ã–µ')
        axes[0, i].set_title(f'{method.upper()}\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        axes[0, i].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        axes[0, i].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
        axes[0, i].grid(True, alpha=0.3)
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        axes[1, i].hist(X_transformed.flatten(), bins=50, alpha=0.7, density=True, 
                       color='orange', label='–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')
        axes[1, i].set_title(f'–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result["variance_stability"]:.4f}')
        axes[1, i].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        axes[1, i].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
        axes[1, i].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('transformation_comparison.png', dpi=300, bbox_inches='tight')
    print("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'transformation_comparison.png'")

def analyze_variance_improvement(X, results, successful_methods):
    """–ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏"""
    print("\n" + "="*60)
    print("–ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –î–ò–°–ü–ï–†–°–ò–ò")
    print("="*60)
    
    original_variance = np.var(X, axis=0)
    original_stability = np.std(original_variance) / np.mean(original_variance)
    
    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {original_stability:.4f}")
    
    improvements = []
    for method in successful_methods:
        result = results[method]
        improvement = (original_stability - result['variance_stability']) / original_stability * 100
        improvements.append((method, improvement, result['variance_stability']))
        
        print(f"{method.upper()}:")
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {improvement:.2f}%")
        print(f"  –ù–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result['variance_stability']:.4f}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    improvements.sort(key=lambda x: x[1], reverse=True)
    
    print(f"\n–õ–£–ß–®–ò–ï –ú–ï–¢–û–î–´ –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:")
    for i, (method, improvement, stability) in enumerate(improvements[:3]):
        print(f"{i+1}. {method.upper()}: {improvement:.2f}% —É–ª—É—á—à–µ–Ω–∏—è")
    
    return improvements

def create_variance_heatmap(X, results, successful_methods):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–∏—Å–ø–µ—Ä—Å–∏–π"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–∏—Å–ø–µ—Ä—Å–∏–π...")
    
    n_methods = len(successful_methods) + 1  # +1 –¥–ª—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    fig, axes = plt.subplots(1, n_methods, figsize=(4*n_methods, 6))
    if n_methods == 1:
        axes = [axes]
    
    fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–π –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º', fontsize=16)
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    original_variance = np.var(X, axis=0)
    axes[0].bar(range(len(original_variance)), original_variance, alpha=0.7)
    axes[0].set_title('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    axes[0].set_xlabel('–ü—Ä–∏–∑–Ω–∞–∫')
    axes[0].set_ylabel('–î–∏—Å–ø–µ—Ä—Å–∏—è')
    axes[0].grid(True, alpha=0.3)
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for i, method in enumerate(successful_methods):
        result = results[method]
        transformer = result['transformer']
        X_transformed = transformer.transform(X)
        transformed_variance = np.var(X_transformed, axis=0)
        
        axes[i+1].bar(range(len(transformed_variance)), transformed_variance, 
                     alpha=0.7, color='orange')
        axes[i+1].set_title(f'{method.upper()}\n–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result["variance_stability"]:.4f}')
        axes[i+1].set_xlabel('–ü—Ä–∏–∑–Ω–∞–∫')
        axes[i+1].set_ylabel('–î–∏—Å–ø–µ—Ä—Å–∏—è')
        axes[i+1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('variance_comparison.png', dpi=300, bbox_inches='tight')
    print("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'variance_comparison.png'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ô –î–ê–ù–ù–´–•")
    print("="*60)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    X, feature_cols = load_and_analyze_data()
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    results, successful_methods = test_transformations(X)
    
    if not successful_methods:
        print("\n‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        return
    
    # 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualize_transformations(X, results, successful_methods)
    
    # 4. –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
    improvements = analyze_variance_improvement(X, results, successful_methods)
    
    # 5. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–π
    create_variance_heatmap(X, results, successful_methods)
    
    # 6. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "="*60)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*60)
    
    best_method = improvements[0][0]
    best_improvement = improvements[0][1]
    
    print(f"üèÜ –õ–£–ß–®–ò–ô –ú–ï–¢–û–î: {best_method.upper()}")
    print(f"   –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {best_improvement:.2f}%")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª–∏")
    
    if best_improvement > 10:
        print("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏!")
    elif best_improvement > 5:
        print("‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
    else:
        print("‚ö†Ô∏è  –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥—Ö–æ–¥—ã")
    
    print(f"\n–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"  - transformation_comparison.png")
    print(f"  - variance_comparison.png")

if __name__ == "__main__":
    main()
